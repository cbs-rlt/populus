/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.22.1'

    //Uncomment this and the apply below to see task dependencies.
    //id "com.dorongold.task-tree" version "1.5"
}

//apply plugin: "com.dorongold.task-tree"

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    //JAR files for application
    implementation files('libs/jcommon-1.0.21.jar')
    implementation files('libs/jfreechart-1.0.17.jar')
    implementation files('libs/jcchart401K.jar')
    implementation files('libs/acrobat.jar')

	//It would be nice to include the org.jree libraries
	//from repo, but they are not "module ready"
    //implementation 'org.jfree:jcommon:1.0.24'
    //Todo: Try out latest version 1.5.0
    //implementation 'org.jfree:jfreechart:1.0.17'

    //acrobat file has a top-level sample class that breaks modules.
    //implementation 'com.adobe.acrobat:acrobat:1.1'

    implementation 'gov.nist.math:jama:1.0.3'

    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit Jupiter API for testing.
    //testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    //JUnit 5.5 can't handle modules, so reverting to 5.4 until
    //the issue is resolved
    //https://github.com/java9-modularity/gradle-modules-plugin/issues/129
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

    // Use JUnit Jupiter Engine for testing.
    //testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

//TODO: The resources shouldn't be in the src directory initially,
//but we would need to change source code to find the new location.
task copyResources {
    dependsOn compileJava
    copy {
        from ('src/main/java') {
            include '**/*.png'
            include '**/*.gif'
            include '**/*.pdf'
        }
        into "${buildDir}/classes/java/main"
    }
}
processResources.finalizedBy copyResources

//TODO: There's probably a better (standard) way of doing this.
//This is read at the beginning of startup and just spit into log/stdout.
//If this isn't run, it will not show up in logs, but will still run.
task createTimestampFile {
    dependsOn compileJava

    doLast {
        logger.info("Creating timestamp file")

        TimeZone.setDefault(TimeZone.getTimeZone('UTC'))
        def now = new Date()
        def formattedDate = now.format("yyyy-MM-dd HH:mm:ss.SSS'Z'")
        def timestampFile = new File("${buildDir}/classes/java/main/edu/umn/ecology/populus/core/timestamp.txt")
        if (timestampFile.exists()) {
            timestampFile.delete()
        }
        timestampFile.createNewFile()
        timestampFile.text=formattedDate
    }
}
processResources.finalizedBy copyResources

jar {
    manifest {
        attributes 'Main-Class': 'edu.umn.ecology.populus.core.PopRun'
    }
}

application {
    // Define the main class for the application.
    mainModule = 'edu.umn.ecology.populus' // name defined in module-info.java
    mainClass = 'edu.umn.ecology.populus.core.PopRun'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher{
        name = 'Populus'
    }

    jpackage {
        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        appVersion = '6.1.0'
        installerOptions += [
                '--vendor', 'University of Minnesota',
                '--license-file', 'LICENSE',
        ]
        if (currentOs.macOsX) {
            imageOptions = ['--resource-dir', 'src/main/resources/installer/macosx']
            installerOptions = ['--resource-dir', 'src/main/resources/installer/macosx']
            icon = "src/main/resources/installer/macosx/picon.icns"
        } else if (currentOs.windows) {
            imageOptions = ['--resource-dir', 'src/main/resources/installer/windows']
            installerOptions = ['--resource-dir', 'src/main/resources/installer/windows']
            icon = "src/main/resources/installer/windows/picon.ico"
            installerOptions += [
                    '--win-dir-chooser',
            ]
        } else { //Linux
            imageOptions = ['--resource-dir', 'src/main/resources/installer/linux']
            installerOptions = ['--resource-dir', 'src/main/resources/installer/linux']
            icon = "src/main/resources/installer/linux/picon.png"
            installerOptions += [
                    '--linux-menu-group', 'Education',
                    '--linux-shortcut',
            ]
            if (project.findProperty('installerType') == 'rpm') {
                installerOptions += [
                    '--linux-rpm-license-type', 'GPLv2'
                ]
            }
        }
    }
}
